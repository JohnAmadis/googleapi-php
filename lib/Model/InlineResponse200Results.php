<?php
/**
 * InlineResponse200Results
 *
 * PHP version 5
 *
 * @category Class
 * @package  GoogleApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Google GeoCode API
 *
 * API for handling of the geocode
 *
 * OpenAPI spec version: 1.0.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoogleApi\Client\Model;

use \ArrayAccess;
use \GoogleApi\Client\ObjectSerializer;

/**
 * InlineResponse200Results Class Doc Comment
 *
 * @category Class
 * @package  GoogleApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200Results implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'addressComponents' => '\GoogleApi\Client\Model\AddressComponent[]',
        'formattedAddress' => 'string',
        'geometry' => '\GoogleApi\Client\Model\Geometry',
        'placeId' => 'string',
        'plusCode' => '\GoogleApi\Client\Model\PlusCode',
        'types' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'addressComponents' => null,
        'formattedAddress' => null,
        'geometry' => null,
        'placeId' => null,
        'plusCode' => null,
        'types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addressComponents' => 'address_components',
        'formattedAddress' => 'formatted_address',
        'geometry' => 'geometry',
        'placeId' => 'place_id',
        'plusCode' => 'plus_code',
        'types' => 'types'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addressComponents' => 'setAddressComponents',
        'formattedAddress' => 'setFormattedAddress',
        'geometry' => 'setGeometry',
        'placeId' => 'setPlaceId',
        'plusCode' => 'setPlusCode',
        'types' => 'setTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addressComponents' => 'getAddressComponents',
        'formattedAddress' => 'getFormattedAddress',
        'geometry' => 'getGeometry',
        'placeId' => 'getPlaceId',
        'plusCode' => 'getPlusCode',
        'types' => 'getTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addressComponents'] = isset($data['addressComponents']) ? $data['addressComponents'] : null;
        $this->container['formattedAddress'] = isset($data['formattedAddress']) ? $data['formattedAddress'] : null;
        $this->container['geometry'] = isset($data['geometry']) ? $data['geometry'] : null;
        $this->container['placeId'] = isset($data['placeId']) ? $data['placeId'] : null;
        $this->container['plusCode'] = isset($data['plusCode']) ? $data['plusCode'] : null;
        $this->container['types'] = isset($data['types']) ? $data['types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addressComponents
     *
     * @return \GoogleApi\Client\Model\AddressComponent[]
     */
    public function getAddressComponents()
    {
        return $this->container['addressComponents'];
    }

    /**
     * Sets addressComponents
     *
     * @param \GoogleApi\Client\Model\AddressComponent[] $addressComponents addressComponents
     *
     * @return $this
     */
    public function setAddressComponents($addressComponents)
    {
        $this->container['addressComponents'] = $addressComponents;

        return $this;
    }

    /**
     * Gets formattedAddress
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->container['formattedAddress'];
    }

    /**
     * Sets formattedAddress
     *
     * @param string $formattedAddress formattedAddress
     *
     * @return $this
     */
    public function setFormattedAddress($formattedAddress)
    {
        $this->container['formattedAddress'] = $formattedAddress;

        return $this;
    }

    /**
     * Gets geometry
     *
     * @return \GoogleApi\Client\Model\Geometry
     */
    public function getGeometry()
    {
        return $this->container['geometry'];
    }

    /**
     * Sets geometry
     *
     * @param \GoogleApi\Client\Model\Geometry $geometry geometry
     *
     * @return $this
     */
    public function setGeometry($geometry)
    {
        $this->container['geometry'] = $geometry;

        return $this;
    }

    /**
     * Gets placeId
     *
     * @return string
     */
    public function getPlaceId()
    {
        return $this->container['placeId'];
    }

    /**
     * Sets placeId
     *
     * @param string $placeId placeId
     *
     * @return $this
     */
    public function setPlaceId($placeId)
    {
        $this->container['placeId'] = $placeId;

        return $this;
    }

    /**
     * Gets plusCode
     *
     * @return \GoogleApi\Client\Model\PlusCode
     */
    public function getPlusCode()
    {
        return $this->container['plusCode'];
    }

    /**
     * Sets plusCode
     *
     * @param \GoogleApi\Client\Model\PlusCode $plusCode plusCode
     *
     * @return $this
     */
    public function setPlusCode($plusCode)
    {
        $this->container['plusCode'] = $plusCode;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[] $types types
     *
     * @return $this
     */
    public function setTypes($types)
    {
        $this->container['types'] = $types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


